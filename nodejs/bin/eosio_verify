#!/usr/bin/env node

'use strict'
const program           = require('commander');
const seal              = require('../lib/nfc-seal');
const ecc               = require('eosjs-ecc');
const shajs             = require('sha.js');

const { Api, JsonRpc, RpcError } = require('eosjs');
const fetch = require('node-fetch');


program
    .option('--url [value]', 'EOSIO API URL')
    .option('--contract [value]', 'sealregistry contract account')
    .option('--loop', 'Continue by increasing sequence number')
    .parse(process.argv);

if (!program.url || !program.contract) {
    program.help();
}


const rpc = new JsonRpc(program.url, { fetch });

seal.nfc_loop(do_read_label, !program.loop);

async function do_read_label(reader, card) {
    let label = await seal.read_label(reader, card);
    let issuerid = label.issuerid.readBigInt64BE();
    let seqnum = label.seqnum.readBigInt64BE();
    
    console.info('Read a label for issuerid=' + issuerid.toString(10) +
                 ' and seqnum=' + seqnum.toString(10));
    
    let seqkey = issuerid * (2n**64n) + seqnum;
    console.log('Lookup key: ' + seqkey);
    
    await (async () => {
        try {
            console.info('Looking up issuer key on blockchain... ');
            const resp = await rpc.get_table_rows({
                json: true,
                code: program.contract,
                scope: 0,
                table: 'pubkeys',
                index_position: 2,
                key_type: 'i128',
                lower_bound: seqkey.toString(10),      
                limit: 1,
                reverse: false,
                show_payer: false
            });

            if( resp.rows.length == 0 ||
                resp.rows[0].issuerid != issuerid ||
                resp.rows[0].seq_start > seqnum ||
                resp.rows[0].seq_end < seqnum ) {
                console.error('Cannot find a public key for issuerid=' + issuerid.toString(10) +
                              ' and seqnum=' + seqnum.toString(10));
            }
            else {
                let pubkey = resp.rows[0].pubkey;
                console.log('Found public key on blockchain: ' + pubkey);

                if( resp.rows[0].revoked != 0 ) {
                    console.error('ATTENTION: the public key is revoked by issuer on ' +
                                  resp.rows[0].revoked_at + ', reason: ' +
                                  resp.rows[0].revoke_reason);
                }
                
                if( seal.verify_labelsig(label, pubkey) ) {
                    console.log("Signature is RIGHT");
                    console.log("Looking up signature hash on blockchain...");

                    const resp = await rpc.get_table_rows({
                        json: true,
                        code: program.contract,
                        scope: 0,
                        table: 'seals',
                        index_position: 2,
                        key_type: 'i128',
                        lower_bound: seqkey.toString(10),      
                        limit: 1,
                        reverse: false,
                        show_payer: false
                    });

                    if( resp.rows.length == 0 ||
                        BigInt(resp.rows[0].issuerid) != issuerid ||
                        BigInt(resp.rows[0].seqnum) != seqnum ) {
                        console.error('Cannot find a seal on blockchain for ' +
                                      'issuerid=' + issuerid.toString(10) +
                                      ' and seqnum=' + seqnum.toString(10));
                    }
                    else {
                        let sighash = shajs('sha256').update(label.labelsig).digest('hex');
                        if(resp.rows[0].sighash == sighash) {
                            console.log('Seal hash is RIGHT. sighash=' + sighash);
                        }
                        else {
                            console.error('Seal hash is WRONG: on blockahin: ' + resp.rows[0].sighash +
                                          ', on the chip: ' + sighash);
                        }
                    }
                }
                else {
                    console.error('Signature is WRONG');
                }
            }
            
        } catch (e) {
            console.error('ERROR: ' + e);
        }
    })();        
}










/*
 Local Variables:
 mode: javascript
 indent-tabs-mode: nil
 End:
*/
