#!/usr/bin/env node

'use strict'
const program           = require('commander');
const seal              = require('../lib/nfc-seal');
const shajs             = require('sha.js');
const QRCode            = require('qrcode');

program
    .option('--format [value]', 'Format version: 0 without signature hash, 1 with it')
    .option('--imgdir [value]', 'Directory for storing QR code images')
    .option('--ext [value]', 'Output file format', 'png')
    .option('--loop', 'Continue by increasing sequence number')
    .parse(process.argv);

if (!program.imgdir || !program.format) {
    program.help();
}

if( program.format !== '0' && program.format !== '1' ) {
    console.error('Wrong format version');
    process.exit(1);
}


seal.nfc_loop(do_read_label, !program.loop);

async function do_read_label(reader, card) {
    let label = await seal.read_label(reader, card);
    let issuerid = label.issuerid.readBigInt64BE();
    let seqnum = label.seqnum.readBigInt64BE();
    
    console.info('Read a label for issuerid=' + issuerid.toString(10) +
                 ' and seqnum=' + seqnum.toString(10));
    
    await (async () => {
        try {
            let issuerid_pad = '00000000000000000000' + issuerid.toString(10);
            issuerid_pad = issuerid_pad.substr(issuerid_pad.length - 20);

            let seqnum_pad = '00000000000000000000' + seqnum.toString(10);
            seqnum_pad = seqnum_pad.substr(seqnum_pad.length - 20);

            let filename = program.imgdir + '/' +
                'seal_' + issuerid_pad + '_' + seqnum_pad + '.' + program.ext;
            
            console.info('Writing QR code to ' + filename);
            let data = ['076CF31A2B7F35A3',
                        program.format,
                        issuerid_pad,
                        seqnum_pad];

            if( program.format === '1' ) {
                data.push(shajs('sha256').update(label.labelsig).digest('hex').toUpperCase());
            }
            
            QRCode.toFile(filename,
                          [
                              {data: data.join('/'), mode: 'alphanumeric'}
                          ],
                          {type: program.ext,
                           errorCorrectionLevel: 'H'},
                          function (err) {
                              if (err) throw err;
                              console.log('done')
                          });
        } catch (e) {
            console.error('ERROR: ' + e);
        }
    })();    
}










/*
 Local Variables:
 mode: javascript
 indent-tabs-mode: nil
 End:
*/
